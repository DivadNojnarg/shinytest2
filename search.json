[{"path":"https://rstudio.github.io/shinytest2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 shinytest2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"code","dir":"Articles","previous_headings":"","what":"Code","title":"{shinytest} migration guide","text":"section comprehensive guide migrate shinytest testing code new shinytest2 testing code.","code":""},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"methods","dir":"Articles","previous_headings":"Code","what":"Methods","title":"{shinytest} migration guide","text":"old$click(name, iotype = c(\"auto\", \"input\", \"output\")): parameters separated clearer intended use: new$click(input, output, ..., selector). old$executeScript(script, ...): ... must now supplied arguments. allows extra parameters file can contain script content timeout throw error timeout (milliseconds) reached script returns. Note, scripts now require return statement executed within function able access arguments. promise returned script resolved value sent back R session. old$executeScriptAsync(script, ...): method magically added callback argument block R session callback called within script. shinytest2, script need updated use JavaScript Promise. Promise’s resolve method callback used previously. also provide maximum timeout (milliseconds) willing wait error thrown. Ex: old$getAllValues(input = TRUE, output = TRUE, export = TRUE): method renamed new$get_values(input, output, export). new method slightly different behavior input, output export provided. input, output export provided, method return values provided input, output export . input, output export provided, method return values, similar setting input = TRUE, output = TRUE, export = TRUE. old$getValue(name, iotype): ShinyDriver$getValue() renamed AppDriver$get_value() parameters spread input output adding support export. old$getUrl(): method renamed new$get_url(). old$setInputs(..., wait_ = TRUE, values_ = TRUE, timeout_ = 3 * 1000, allowInputNoBinding_ = FALSE, priority_ = c(\"input\", \"event\")): method name renamed parameters snake_case’ed. value_ removed, functionality can achieved via call new$get_values() afterwards. old$getWindowSize(), old$setWindowSize(width, height): methods bee renamed new$get_window_size() new$set_window_size(width, height).","code":"## Old old$click(\"mybutton\") old$click(\"clickcount\", iotype = \"output\") old$click(\"my_id\", iotype = \"auto\")  ## New new$click(\"mybutton\"); new$click(input = \"mybutton\") new$click(output = \"clickcount\") new$click(selector = \"#my_id\") ## Old old$executeScript(\"1 + 1;\") old$executeScript(\"var life = arguments[0]; life;\", 42)  ## New new$execute_js(\"return 1 + 1;\") new$execute_js(\"let life = arguments[0]; return life;\", arguments = list(42)) # If a promise is returned, the resolved value will be sent back to the R session new$execute_js(   \"   let life = arguments[0];   return new Promise((resolve, reject) => resolve(life));   \",   arguments = list(42) ) ## Old # Wait until a button is clicked old$executeScriptAsync(   '   var selector = arguments[0];   var callback = arguments[1];   $( selector ).one( \"click\", function() {     callback();   });   ',   \"#mybutton\" )  # New # Wait until a button is clicked new$execute_js(   '   let selector = arguments[0];   return new Promise((resolve, reject) => {     $( selector ).one( \"click\", function() {       resolve();     });   });   ',   arguments = list(\"#mybutton\"),   timeout = 15 * 1000 ) ## Old old$getAllValues() # All input values old$getAllValues(input = TRUE, output = FALSE, export = FALSE) # Only `clickcount` output value old$getAllValues(input = FALSE, output = \"clickcount\", export = FALSE)  ## New new$get_values() # All input values new$get_values(input = TRUE) # Only `clickcount` output value new$get_values(output = \"clickcount\") ## Old old$getValue(\"myinput\")  ## New new$get_value(input = \"myinput\") # Equivalent to new$get_values(input = \"myinput\")$input$myinput ## Old old$getUrl()  ## New new$get_url() ## Old getValuesResult <- old$setInputs(life = 42)  ## New new$set_inputs(life = 42) get_values_result <- new$get_values() ## Old old$getWindowSize() old$setWindowSize(width = 1024, height = 768)  ## New new$get_window_size() new$set_window_size(width = 1024, height = 768)"},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"snapshots","dir":"Articles","previous_headings":"Code","what":"Snapshots","title":"{shinytest} migration guide","text":"Snapshots now handled testthat. leverage , use new$expect_*() methods assert value consistent many testing executions given variant supplied initialization. old$snapshotInit(path, screenshot): method moved parameters: AppDriver$new(name = path). default, name set Shiny application’s directory name. Screenshots may tested allowed AppDriver$new(variant=) value provided, similar suffix value ShinyDriver$new(suffix=). old$snapshot(items, filename, screenshot): method take expect screenshot expect values consistent. method longer exists shinytest2 broken two explicitly called methods: new$expect_screenshot() new$expect_values(). new$expect_values() (default) take debug screenshot never fail expectation. allows historical record (version control) app looked like constantly battle false-positive screenshot failures. single output value supplied new$expect_values(), debug screenshot zoomed output value. old$takeScreenshot(file, id, parent): method renamed new$screenshot(file), id parent parameters removed. use selector, set new$screenshot(myfile, selector = \".custom-selector\") screenshot_args directly. old$snapshotDownload(id, filename): method renamed new$expect_download(id, filename). old$stop(): Stayed ! 🥳. shinytest2, stop chromote instance clean temporary files. old$uploadFile(..., wait_ = TRUE, timeout_ = 3 * 1000): method renamed new$upload_file(...) values_ parameter removed. old$waitFor(expr, checkInterval, timeout): method renamed parameters reordered end new$wait_for_js(script, timeout, interval). Like JavaScript methods shinytest2, script needs explicity return value. old$waitForShiny(): method upgraded new$wait_for_idle(duration = 500, timeout = 30 * 1000). old$waitForShiny() method waited single snapshot time stated Shiny longer busy. new method wait Shiny “idle” set duration. useful wait Shiny idle set duration avoid situations dynamic UI needs calculate new outputs given new input information. old method might pre-emptively declare Shiny idle, new method wait Shiny stablized set duration. old$waitForValue(name, ignore, iotype, timeout, checkInterval): (underutilized) method name/iotype spread separate input, output, export parameters. one input/output/export value may supplied AppDriver object. timeout increased 15 seconds. methods still poll Shiny application set interval corresponding value something ignore set values.","code":"## Old old$snapshotInit(\"mytest\")  ## New new <- AppDriver$new(name = \"mytest\", variant = NULL) # Suggested new <- AppDriver$new(name = \"mytest\", variant = platform_variant()) ## Old old$snapshot() old$snapshot(items = list(output = \"clickcount\"))  ## New # Must supply `variant=` to be able to call `new$expect_screenshot()` new <- AppDriver$new(path_to_app, variant = NULL) new$expect_screenshot(); new$expect_values() new$expect_screenshot(); new$expect_values(output = \"clickcount\")  # Suggested; new <- AppDriver$new(path_to_app) new$expect_values() ## Old old$takeScreenshot(\"myfile1.png\") old$takeScreenshot(\"myfile2.png\", id = \"myid\")  ## New new$screenshot(\"myfile1.png\") new$screenshot(\"myfile2.png\", selector = \"#myid\") new$screenshot(\"myfile2.png\", screenshot_args = list(selector = \"#myid\")) ## Old old$snapshotDownload(\"mylinkid\")  ## New new$expect_download(\"mylinkid\") ## Old old$uploadFile(myFileInput = \"myfile.txt\")  ## New new$upload_file(myFileInput = \"myfile.txt\") ## Old old$waitFor(\"$('#myid').length > 0\")  ## New new$wait_for_js(\"return $('#myid').length > 0\"); ## Old old$waitForShiny()  ## New # Equivalent new$wait_for_idle(duration = 0, timeout = 3 * 1000) # Suggested (Shiny must become continuously idle for at least 500ms within 30s new$wait_for_idle() ## Old old$waitForValue(\"myslider\") old$waitForValue(\"mydynamicplot\", iotype = \"output\")  ## New new$wait_for_value(\"myslider\"); new$wait_for_value(input = \"myslider\") new$wait_for_value(output = \"mydynamicplot\")"},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"elements-widgets","dir":"Articles","previous_headings":"Code","what":"Elements / Widgets","title":"{shinytest} migration guide","text":"Direct element Widget support shinytest2 drastically reduced. ability execute JavaScript function via $execute_js(script), now possible reproduce many methods provided shinytest. old$findElement(), old$findElements(), old$findWidget(): methods removed. suggested use JavaScript code directly use newer helper methods. old$getSource(), old$getTitle(): methods can achieved using JavaScript.","code":"## Old old$findElement(\"#mybutton\")$click() old$findElement(\"#mybutton\")$getText() old$findElement(\"#mybutton\")$getCssValue(\"color\")  ## New new$get_text(selector = \"#mybutton\") new$click(selector = \"#mybutton\") # No direct equivalent method. Using JavaScript instead new$execute_js('$(\"#mybutton\").css(\"color\")') # Old old$getSource() old$getTitle()  # New new$get_html(\"html\", outer_html = TRUE) new$execute_js(\"return window.document.title;\")"},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"testthat-method-updates","dir":"Articles","previous_headings":"Code","what":"{testthat} method updates","title":"{shinytest} migration guide","text":"shinytest2 heavily integrated testthat testing framework. Similar shinytest, snapshots recorded recorded via testthat. information robustness different testing approaches, please see Testing Robustness vignette. ShinyDriver$new(suffix=): Please use AppDriver$new(variant=). new$expect_screenshot(), new$screenshot(TODO): method wrapper around testthat::expect_snapshot_file() variant = new$get_variant(). method separated old$snapshot() explicitly called. new$expect_values(TODO), new$get_values(TODO) new$expect_text(TODO), new$get_text(TODO) new$expect_html(TODO), new$get_html(TODO) old$getRelativePathToApp(), old$getTestsDir(): methods removed longer needed given execution shinytest2 testing always done within testthat testing framework. old$getSnapshotDir(): method removed testthat uses ./_snaps directory store snapshot outputs. old$expectUpdate(output): method longer supported. knowing output value updated, uncertain new value . possibly useful, robust. testing methods explored. Equivalent code provided .","code":"## Old old <- ShinyDriver$new(path_to_app, suffix = \"macos-4.1\")  ## New new <- AppDriver$new(path_to_app, variant = \"macos-4.1\") ## New new$expect_screenshot() new$screenshot(\"myscreenshot.png\") ## Old old$expectUpdate(\"myoutput\", myinput = 42)  ## New (equivalent code) myoutput_prior <- new$get_values(output = \"myoutput\") new$set_inputs(myinput = 42) testthat::expect_failure(   testthat::expect_equal(     new$get_values(output = \"myoutput\"),     myoutput_prior   ) )"},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"debugging","dir":"Articles","previous_headings":"Code","what":"Debugging","title":"{shinytest} migration guide","text":"Debugging shinytest2 unified enabled times. shinytest debugging methods removed favor new$get_log() returns similarly shaped tibble old$getDebugLog()’s data.frame. columns altered generic type broken two columns: location level. old$getDebugLog(), old$getEventLog(): Now use new$get_log(). old$enableDebugLogMessages(enable = TRUE): longer used. messages now recorded. old$logEvent(event, ...): Messages can still recorded using new$log_message(text), ... values longer supported. options = list(shiny.trace = TRUE) set initializing AppDriver object, WebSocket traffic recorded.","code":"## Old old$getDebugLog(); old$getEventLog() old$logEvent(\"Creating report\")  ## New new$get_log() old$log_message(\"Creating report\") ## New # Record all websocket traffic. Very verbose! new <- AppDriver$new(path_to_app, options = list(shiny.trace = TRUE)) new$get_log()"},{"path":"https://rstudio.github.io/shinytest2/articles/migration.html","id":"other-removed-methods","dir":"Articles","previous_headings":"Code","what":"Other removed methods","title":"{shinytest} migration guide","text":"old$setValue(name, value, iotype): set output value, must perfomed setting input value render methods set output value. set input value, use AppDriver$set_inputs(). old$listWidgets(): method removed can achieved getting names existing values: new$get_values(). old$checkUniqueWidgetNames(): Automatically performed startup shinytest2. TODO-barret; AppDriver$expect_unique_names() old$clone(): AppDriver support cloning. (underlying ChromoteSession support cloning, AppDriver can support cloning.) old$goBack(), old$refresh(): method removed can achieved new$execute_js(script). old$getAppDir(), old$getAppFilename(), old$isRmd(): methods removed favor new$get_path(). information can accessed via new$get_path(). old$sendKeys(name, keys): method removed currently easy alternative. familiar key code values, can trigger new$execute_js(script).","code":"## Old old$setValue(\"myinput\", 42)  ## New new$set_inputs(myinput = 42) ## Old old$listWidgets()  ## New lapply(new$get_values(), names) ## Old old$goBack() old$refresh()  ## New # Go back new$execute_js(\"window.history.back();\") # Refresh page new$execute_js(\"window.location.reload();\") ## Old old$isRmd() old$getAppDir() old$getAppFilename()  ## New path <- new$get_path() is_rmd <- fs::path_ext(path) == \".Rmd\" app_dir <- if (is_rmd) fs::path_dir(path) else path filename <- if (is_rmd) basename(path) else NULL ## Old old$sendKeys(\"myinput\", webdriver::keys$enter)  ## New new$execute_js(\"$('#myinput').trigger({type: 'keypress', which: 13, keyCode: 13});\")"},{"path":"https://rstudio.github.io/shinytest2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Barret Schloerke. Maintainer, author. RStudio. Copyright holder, funder. Winston Chang. Contributor.            Original author rstudio/shinytest Gábor Csárdi. Contributor.            Original author rstudio/shinytest Hadley Wickham. Contributor.            Original author rstudio/shinytest Mango Solutions. Copyright holder, conceptor.            Original author rstudio/shinytest","code":""},{"path":"https://rstudio.github.io/shinytest2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schloerke B (2022). shinytest2: Test Shiny Apps 'testthat'. R package version 0.0.0.9001, https://github.com/rstudio/shinytest2.","code":"@Manual{,   title = {shinytest2: Test Shiny Apps with 'testthat'},   author = {Barret Schloerke},   year = {2022},   note = {R package version 0.0.0.9001},   url = {https://github.com/rstudio/shinytest2}, }"},{"path":"https://rstudio.github.io/shinytest2/index.html","id":"shinytest2","dir":"","previous_headings":"","what":"Test Shiny Apps with testthat","title":"Test Shiny Apps with testthat","text":"🚩🚩 {shinytest2} beta developement. Please report bugs feedback https://github.com/rstudio/shinytest2/issues 🚩🚩 shinytest2 facilitates testing shiny applications using headless Chromium web browser via chromote. Using latest features testthat edition 3, snapshot files saved expected values.","code":""},{"path":"https://rstudio.github.io/shinytest2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Test Shiny Apps with testthat","text":"can install development version shinytest2 GitHub :","code":"remotes::install_github(\"rstudio/shinytest2\")"},{"path":"https://rstudio.github.io/shinytest2/index.html","id":"recording-a-test","dir":"","previous_headings":"","what":"Recording a test","title":"Test Shiny Apps with testthat","text":"record test existing shiny application, use record_test() method: recording saved, test file (./tests/testthat/test-shinytest2.R) specialized test runner (./tests/testthat/testthat.R) saved disk.","code":"shinytest::record_test(\".\")"},{"path":"https://rstudio.github.io/shinytest2/index.html","id":"test-example","dir":"","previous_headings":"","what":"Test example","title":"Test Shiny Apps with testthat","text":"saved recording look similar call app$expect_values() save expected snapshot ./tests/testthat/_snaps/shinytest2/unique-name-001.json. addition expected snapshot, debug screenshot file saved ./tests/testthat/_snaps/shinytest2/unique-name-001_.png. screenshot files kept version control (GitHub) see app updates times, visual differences found, differences never fail test.","code":"# ./tests/testthat/test-shinytest2.R library(shinytest2)  test_that(\"values are captured\", {   app <- AppDriver$new(name = \"unique-name\")   app$expect_values() })"},{"path":"https://rstudio.github.io/shinytest2/index.html","id":"migrating-from-shinytest","dir":"","previous_headings":"","what":"Migrating from {shinytest}","title":"Test Shiny Apps with testthat","text":"shinytest predecesor shinytest2. shinytest implemented using webdriver uses PhantomJS. PhantomJS unsupported since 2017 support displaying bslib’s Bootstrap v5. shinytest2 uses chromote connect locally installed Chrome Chromium application. shinytest2 rendering issues displaying bslib’s Bootstrap v5. migrate existing shinytest tests shinytest2, call helper method shinytest2::migrate_from_shinytest(path).","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":null,"dir":"Reference","previous_headings":"","what":"Remote control a Shiny app running in a headless browser — AppDriver","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"class starts Shiny app new R session, along chromote headless browser can used simulate user actions. provides full simulation Shiny app can test user interactions live app.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"startup-failure","dir":"Reference","previous_headings":"","what":"Startup failure","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"app throws error initialization, AppDriver stored rlang::last_error()$app. allows \"failure initialize\" signaled also allowing app retrieved initialization error thrown.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"AppDriver$new() AppDriver$view() AppDriver$expect_text() AppDriver$get_text() AppDriver$expect_html() AppDriver$get_html() AppDriver$expect_js() AppDriver$expect_download() AppDriver$get_download() AppDriver$get_value() AppDriver$get_values() AppDriver$expect_values() AppDriver$screenshot() AppDriver$expect_screenshot() AppDriver$set_inputs() AppDriver$click() AppDriver$upload_file() AppDriver$wait_for_js() AppDriver$wait_for_idle() AppDriver$wait_for_value() AppDriver$execute_js() AppDriver$get_path() AppDriver$get_url() AppDriver$get_window_size() AppDriver$set_window_size() AppDriver$get_chromote_session() AppDriver$get_variant() AppDriver$get_log() AppDriver$log_message() AppDriver$stop()","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Initialize AppDriver","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$new(   path = testthat::test_path(\"../../\"),   ...,   name = NULL,   variant = missing_arg(),   seed = NULL,   load_timeout = NULL,   screenshot_args = missing_arg(),   expect_values_screenshot_args = TRUE,   check_names = TRUE,   view = missing_arg(),   height = NULL,   width = NULL,   clean_logs = TRUE,   shiny_args = list(),   render_args = NULL,   options = list() )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"path Path directory containing Shiny app, .e. single app.R file server.R-ui.R pair. ... Must empty. Allows parameter expansion. name Prefix name use saving testthat snapshot files variant -NULL, results saved _snaps/variant/test.md, variant` must single string alphanumeric characters suitable use directory name. can variants deal cases snapshot output varies want capture test variations. Common use cases include variations operating system, R version, version key dependency. example usage, see platform_variant(). seed optional random seed use starting application. apps use R's random number generator, can make behavior repeatable. load_timeout long wait app load, ms. includes time start R. Defaults 10s running locally 20s running CI. screenshot_args Default set arguments pass chromote::ChromoteSession's $screenshot() method taking screnshots within $expect_screenshot(). disable screenshots default, set FALSE. expect_values_screenshot_args value screenshot_args producing debug screenshot $expect_values(). check_names Check widget names unique application initially loads? view Opens Chromote Session interactive browser tab initialization. Defaults FALSE. height, width Window size use opening Chromote Session. values used height width NULL. clean_logs Whether remove stdout stderr logs Shiny process object garbage collected. shiny_args list options pass shiny::runApp(). Ex: list(port = 8080). render_args Passed rmarkdown::run(render_args=) interactive .Rmds. Ex: `list(quiet = TRUE) options list base::options() set driver's child process. See shiny::shinyOptions() inspiration. shiny.trace = TRUE, WebSocket traffic captured chromote logged.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-view-","dir":"Reference","previous_headings":"","what":"Method view()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Calls $view() Chromote Session object","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$view()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-expect-text-","dir":"Reference","previous_headings":"","what":"Method expect_text()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Expect snapshot UI text $expect_text() extract text value matching elements via TAG.textContent store snapshot file. method robust internal package change text values maintained. possible, use $expect_text() $expect_html() allow package authors room alter HTML structures. resulting array TAG.textContent values found stored snapshot file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_text(selector, ..., cran = FALSE)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"selector DOM CSS selector passed document.querySelectorAll() ... Must empty. Allows parameter expansion. cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_text(selector)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"selector DOM CSS selector passed document.querySelectorAll()","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-expect-html-","dir":"Reference","previous_headings":"","what":"Method expect_html()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Expect snapshot UI HTML $expect_html() extract full DOM structures matching element store snapshot file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_html(selector, ..., outer_html = TRUE, cran = FALSE)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"selector DOM selector passed document.querySelectorAll() ... Must empty. Allows parameter expansion. outer_html TRUE, full DOM structure returned (TAG.outerHTML). FALSE, full DOM structure child elements returned (TAG.innerHTML). cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_html(selector, ..., outer_html = TRUE)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"selector DOM selector passed document.querySelectorAll() ... Must empty. Allows parameter expansion. outer_html TRUE, full DOM structure returned (TAG.outerHTML). FALSE, full DOM structure child elements returned (TAG.innerHTML).","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-expect-js-","dir":"Reference","previous_headings":"","what":"Method expect_js()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Expect snapshot JS script output building block function called functions. example, $expect_text() $expect_html() thin wrappers around function.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_js(   script = missing_arg(),   ...,   arguments = list(),   file = missing_arg(),   timeout = 15 * 1000,   pre_snapshot = NULL,   cran = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"script string containing JS script executed. ... Must empty. Allows parameter expansion. arguments list unnamed arguments send script. file file containing JavaScript code read used script. one script file can specified. timeout Amount time wait giving (milliseconds). pre_snapshot function called result script taking snapshot. $expect_html() $expect_text() use unlist(). cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-expect-download-","dir":"Reference","previous_headings":"","what":"Method expect_download()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Expect download file action. Given shiny::downloadButton()/shiny::downloadLink() id, corresponding file downloaded saved snapshot file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_download(id, ..., name = NULL, cran = FALSE)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"id Output id shiny::downloadButton()/shiny::downloadLink() ... Must empty. Allows parameter expansion. name File name save file . default, NULL, generates ascending sequence names: 001.download, 002.download, etc. cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-download-","dir":"Reference","previous_headings":"","what":"Method get_download()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Retrieve download download file action. Given shiny::downloadButton()/shiny::downloadLink() id, corresponding file downloaded saved file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_download(id, filename = NULL)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"id Output id shiny::downloadButton()/shiny::downloadLink() filename File path save downloaded file . NULL, temp file ending .download used.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Returns named list inputs, outputs, export values.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_value(   ...,   input = missing_arg(),   output = missing_arg(),   export = missing_arg(),   hash_images = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Must empty. Allows parameter expansion. input, output, export One variable contain single string value. one value specified values specified, error thrown. hash_images TRUE, images hashed returned. Otherwise, images return full data64 encoded value.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-values-","dir":"Reference","previous_headings":"","what":"Method get_values()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Returns named list inputs, outputs, export values.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_values(   ...,   input = missing_arg(),   output = missing_arg(),   export = missing_arg(),   hash_images = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Must empty. Allows parameter expansion. input, output, export Either TRUE return input/output/exported values, character vector specific controls. hash_images TRUE, images hashed returned. Otherwise, images return full data64 encoded value.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-expect-values-","dir":"Reference","previous_headings":"","what":"Method expect_values()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Take appshot Shiny application Appshot: Shiny Application Snapshot appshot currently consists two snapshot files: screenshot Shiny application using $screenshot() function chromote::ChromoteSession JSON snapshot Shiny component values","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_values(   ...,   input = missing_arg(),   output = missing_arg(),   export = missing_arg(),   screenshot_args = missing_arg(),   name = NULL,   cran = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Must empty. Allows parameter expansion. input, output, export Depending parameters supplied, different return values can occur: * input, output, export missing, values included snapshot. * least one input, output, export specified, values included snapshot. values supplied can : * character vector specific names include snapshot. * TRUE, values type included snapshot. * Anything else result parameter ignored. screenshot_args value passed along $expect_screenshot() resulting expectation ignored. missing, default value $initialize(expect_values_screenshot_args=). final value can either : TRUE: screenshot whole page taken delay FALSE: screenshot taken named list arguments: Arguments passed directly chromote::ChromoteSession's $screenshot() method. selector delay default \"html\" 0 respectively. Take screenshot Shiny application name file name used snapshot. file extension ignored. default, uses name supplied app initialization counter. cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$screenshot(   file = NULL,   ...,   screenshot_args = missing_arg(),   delay = missing_arg(),   selector = missing_arg() )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"file NULL, image displayed current Graphics Device. file path, screenshot saved file. Expect screenshot Shiny application ... Must empty. Allows parameter expansion. screenshot_args named list arguments passed along chromote::ChromoteSession's $screenshot() method. missing, value default $initialize(screenshot_args=). value : TRUE: screenshot whole page taken delay named list arguments: Arguments passed directly chromote::ChromoteSession's $screenshot() method. selector delay default \"html\" 0 respectively. FALSE value provided, parameter ignored screenshot taken default behavior. delay number milliseconds wait taking screenshot. value can either supplied delay screenshot_args's delay slot. delay parameter preference. selector selector CSS selector used select portion page captured. value can either supplied selector screenshot_args's selector slot. selector parameter preference. default value take picture whole page.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$expect_screenshot(   ...,   screenshot_args = missing_arg(),   delay = missing_arg(),   selector = missing_arg(),   name = NULL,   cran = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Must empty. Allows parameter expansion. screenshot_args named list arguments passed along chromote::ChromoteSession's $screenshot() method. missing, value default $initialize(screenshot_args=). value : TRUE: screenshot whole page taken delay named list arguments: Arguments passed directly chromote::ChromoteSession's $screenshot() method. selector delay default \"html\" 0 respectively. FALSE value provided, parameter ignored screenshot taken default behavior. delay number milliseconds wait taking screenshot. value can either supplied delay screenshot_args's delay slot. delay parameter preference. selector selector CSS selector used select portion page captured. value can either supplied selector screenshot_args's selector slot. selector parameter preference. default value take picture whole page. name file name used snapshot. file extension overwritten .png. default, uses name supplied app initialization counter. cran expectations verified CRAN? default, , snapshot tests tend fragile often rely minor details dependencies.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-set-inputs-","dir":"Reference","previous_headings":"","what":"Method set_inputs()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Set input values.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$set_inputs(   ...,   wait_ = TRUE,   timeout_ = 3 * 1000,   allow_no_input_binding_ = FALSE,   priority_ = c(\"input\", \"event\") )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Name-value pairs, component_name_1 = value_1, component_name_2 = value_2 etc. Input name component_name_1 assigned value value_1. wait_ Wait reactive updates completed? timeout_ Amount time wait giving (milliseconds). allow_no_input_binding_ setting value input, allow set value input even input input binding. priority_ Sets event priority. expert use : see https://shiny.rstudio.com/articles/communicating--js.html#values-vs-events details.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Returns updated values, invisibly.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-click-","dir":"Reference","previous_headings":"","what":"Method click()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Find Shiny input/output value DOM CSS selector click using DOM method TAG.click()","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$click(   input = missing_arg(),   output = missing_arg(),   selector = missing_arg(),   ... )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"input, output, selector name Shiny input/output value DOM CSS selector. one may used. ... input used, extra arguments passed $set_inputs(!!input := \"click\", ...). default, means AppDriver wait output updated within specified timeout_.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-upload-file-","dir":"Reference","previous_headings":"","what":"Method upload_file()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Uploads file file input.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$upload_file(..., wait_ = TRUE, timeout_ = 3 * 1000)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Name-path pair, e.g. component_name = file_path. file located file_path uploaded file input name component_name. wait_ Wait reactive updates completed? timeout_ Amount time wait giving (milliseconds).","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-wait-for-js-","dir":"Reference","previous_headings":"","what":"Method wait_for_js()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Wait JavaScript expression true Waits JavaScript expression evaluates true timeout exceeded.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$wait_for_js(script, timeout = 30 * 1000, interval = 100)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"script string containing JavaScript code. code must eventually return truethy value timeout error thrown. timeout long script return truethy value, ms. interval often check condition, ms.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"invisible(self) expression evaluates true without error within timeout. Otherwise error thrown","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-wait-for-idle-","dir":"Reference","previous_headings":"","what":"Method wait_for_idle()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Wait Shiny busy (idle) set amount time Waits Shiny busy set duration time, .e. reactivity updating occured. useful, example, waiting application initialize resized window $set_window_size() want make sure plot redrawing complete take screenshot.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$wait_for_idle(duration = 500, timeout = 30 * 1000)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"duration long Shiny must idle (ms) unblocking R session. timeout often check condition, ms.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"invisible(self) Shiny stablizes within timeout. Otherwise error thrown","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-wait-for-value-","dir":"Reference","previous_headings":"","what":"Method wait_for_value()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Wait new Shiny value Waits input, output, exported shiny value one ignored values, timeout reached. single input, output, export value may used. function can useful helping determine application finished processing complex reactive situation.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$wait_for_value(   ...,   input = missing_arg(),   output = missing_arg(),   export = missing_arg(),   ignore = list(NULL, \"\"),   timeout = 15 * 1000,   interval = 400 )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"... Must empty. Allows parameter expansion. input, output, export name input, output, export value. one parameters may used. ignore List possible values ignore checking updates. timeout long can wait (ms) throwing error. interval often check condition, ms.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Newly found value","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-execute-js-","dir":"Reference","previous_headings":"","what":"Method execute_js()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Execute JavaScript code browser. function block local R session code finished executing tick browser. Promise returned script, $execute_js() wait promise resolve. JavaScript code execute asynchronously, wrap code Promise object script return atomic value.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$execute_js(   script = missing_arg(),   ...,   arguments = list(),   file = missing_arg(),   timeout = 15 * 1000 )"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"script JS execute. JS Promise returned, R session block promise resolved return value. ... Must empty. Allows parameter expansion. arguments list unnamed arguments send script. file (local) file containing JavaScript code read used script. one script file can specified. timeout Amount time wait giving (milliseconds).","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Result script (file contents)","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-path-","dir":"Reference","previous_headings":"","what":"Method get_path()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Retrieve Shiny app path","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_path()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":".Rmd file, return full .Rmd path, otherwise return directory containing file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-url-","dir":"Reference","previous_headings":"","what":"Method get_url()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Retrieve Shiny app URL","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_url()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"URL","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-window-size-","dir":"Reference","previous_headings":"","what":"Method get_window_size()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Get current size browser window, list integer scalars named width height.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_window_size()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-set-window-size-","dir":"Reference","previous_headings":"","what":"Method set_window_size()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Sets size browser window.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$set_window_size(width, height, wait = TRUE)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"width, height Height width browser, pixels. wait TRUE, $wait_for_idle() called setting window size. allow width specific items (plots) rerendered.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-chromote-session-","dir":"Reference","previous_headings":"","what":"Method get_chromote_session()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Chromote Session object chromote package.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_chromote_session()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-variant-","dir":"Reference","previous_headings":"","what":"Method get_variant()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Get variant supplied initialization","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_variant()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-get-log-","dir":"Reference","previous_headings":"","what":"Method get_log()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Query one debug logs. standard debug types may used: \"shiny_console\": Displays console messages Shiny server $get_log() called. \"browser\": Displays browser console messages $get_log() called. \"shinytest2\": Displays messages saved window.shinytest2 object browser $get_log() called. \"ws_messages\": Saves messages sent Shiny ","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$get_log()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"data.frame following columns: workerid: shiny worker ID found within browser timestamp: POSIXct timestamp message location: location message found. One three values: shinytest2: Occurs $log_message() called shiny: Stdin stdout messages Shiny server. Note message() output sent stdout. chromote: Captured chromote event handlers. See console API, exception thrown, websocket sent, websocket received details level:","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"\\dontrun{  app <- AppDriver$new(system.file(\"examples/01_hello\", package = \"shiny\")) app$get_log() # {shinytest2} R  info  11:15:20.11 Start AppDriver initialization # {shinytest2} R  info  11:15:20.11 Starting Shiny app # {shinytest2} R  info  11:15:20.99 Creating new chromote session # {shinytest2} R  info  11:15:21.14 Navigating to Shiny app # {shinytest2} R  info  11:15:21.27 Injecting shiny-tracer.js # {chromote}   JS info  11:15:21.28 shinytest2; jQuery not found # {chromote}   JS info  11:15:21.28 shinytest2; Loaded # {shinytest2} R  info  11:15:21.28 Waiting until Shiny app starts # {chromote}   JS info  11:15:21.35 shinytest2; jQuery found # {chromote}   JS info  11:15:21.35 shinytest2; Waiting for shiny session to connect # {chromote}   JS info  11:15:21.57 shinytest2; Connected # {chromote}   JS info  11:15:21.57 shinytest2; Ready # {chromote}   JS info  11:15:21.65 shinytest2; shiny:busy # {shinytest2} R  info  11:15:21.65 Shiny app started # {chromote}   JS info  11:15:21.88 shinytest2; shiny:idle # {chromote}   JS info  11:15:21.88 shinytest2; shiny:value distPlot # {shiny}      R  error ----------- Loading required package: shiny # {shiny}      R  error ----------- Running application in test mode. # {shiny}      R  error ----------- # {shiny}      R  error ----------- Listening on http://127.0.0.1:42558   # To capture all websocket traffic, set `options = list(shiny.trace = TRUE)` app <- AppDriver$new(   system.file(\"examples/01_hello\", package = \"shiny\"),   options = list(shiny.trace = TRUE) ) app$get_log() # (long output lines have been truncated) # {shinytest2} R  info      11:09:57.43 Start AppDriver initialization # {shinytest2} R  info      11:09:57.43 Starting Shiny app # {shinytest2} R  info      11:09:58.27 Creating new chromote session # {shinytest2} R  info      11:09:58.40 Navigating to Shiny app # {shinytest2} R  info      11:09:58.53 Injecting shiny-tracer.js # {chromote}   JS info      11:09:58.53 shinytest2; jQuery not found # {chromote}   JS info      11:09:58.53 shinytest2; Loaded # {shinytest2} R  info      11:09:58.54 Waiting until Shiny app starts # {chromote}   JS info      11:09:58.61 shinytest2; jQuery found # {chromote}   JS info      11:09:58.61 shinytest2; Waiting for shiny session to connect # {chromote}   JS websocket 11:09:58.73 send {\"method\":\"init\",\"data\":{\"bins\":30,|truncated # {chromote}   JS websocket 11:09:58.78 recv {\"config\":{\"workerId\":\"\",\"sessionId\":|truncated # {chromote}   JS info      11:09:58.78 shinytest2; Connected # {chromote}   JS info      11:09:58.78 shinytest2; Ready # {chromote}   JS websocket 11:09:58.85 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:58.85 recv {\"busy\":\"busy\"} # {chromote}   JS info      11:09:58.85 shinytest2; shiny:busy # {chromote}   JS websocket 11:09:58.86 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:58.86 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shinytest2} R  info      11:09:58.87 Shiny app started # {shinytest2} R  info      11:09:59.07 Setting inputs: 'bins' # {chromote}   JS websocket 11:09:59.08 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.08 recv {\"busy\":\"idle\"} # {chromote}   JS info      11:09:59.08 shinytest2; shiny:idle # {chromote}   JS websocket 11:09:59.08 recv {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {chromote}   JS info      11:09:59.08 shinytest2; shiny:value distPlot # {chromote}   JS info      11:09:59.08 shinytest2; inputQueue: adding bins # {chromote}   JS info      11:09:59.09 shinytest2; inputQueue: flushing bins # {chromote}   JS websocket 11:09:59.10 send {\"method\":\"update\",\"data\":{\"bins\":20}} # {chromote}   JS websocket 11:09:59.11 recv {\"progress\":{\"type\":\"binding\",|truncated # {chromote}   JS websocket 11:09:59.11 recv {\"busy\":\"busy\"} # {chromote}   JS info      11:09:59.11 shinytest2; shiny:busy # {chromote}   JS websocket 11:09:59.12 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:59.14 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.18 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.19 recv {\"busy\":\"idle\"} # {chromote}   JS info      11:09:59.19 shinytest2; shiny:idle # {chromote}   JS websocket 11:09:59.21 recv {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {chromote}   JS info      11:09:59.21 shinytest2; shiny:value distPlot # {shinytest2} R  info      11:09:59.21 Finished setting inputs. Timedout: FALSE # {shinytest2} R  info      11:09:59.21 Getting all values # {shiny}      R  error     ----------- Loading required package: shiny # {shiny}      R  error     ----------- Running application in test mode. # {shiny}      R  error     ----------- # {shiny}      R  error     ----------- Listening on http://127.0.0.1:1505 # {shiny}      R  error     ----------- SEND {\"config\":{\"workerId\":\"\",\"sessionId\":|truncated # {shiny}      R  error     ----------- RECV {\"method\":\"init\",\"data\":{\"bins\":30,|truncated # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\"|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"busy\"} # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\"|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"idle\"} # {shiny}      R  error     ----------- SEND {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {shiny}      R  error     ----------- RECV {\"method\":\"update\",\"data\":{\"bins\":20}} # {shiny}      R  error     ----------- SEND {\"progress\":{\"type\":\"binding\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"busy\"} # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"idle\"} # {shiny}      R  error     ----------- SEND {\"errors\":{},\"values\":{\"distPlot\":{|truncated  }"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-log-message-","dir":"Reference","previous_headings":"","what":"Method log_message()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Add message log.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$log_message(message)"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"message Single message store log","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"method-stop-","dir":"Reference","previous_headings":"","what":"Method stop()","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"Stop Shiny application Stop app, terminate external R process runs app Chromote Session instance. stop shiny application return value $stop(), see shiny::stopApp(). useful testing return context information. Typically, paired button clicked call shiny::stopApp(info) return info test app back main R session.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"AppDriver$stop()"},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"result background process Shiny application already terminated.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/AppDriver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote control a Shiny app running in a headless browser — AppDriver","text":"","code":"## ------------------------------------------------ ## Method `AppDriver$get_log` ## ------------------------------------------------  if (FALSE) {  app <- AppDriver$new(system.file(\"examples/01_hello\", package = \"shiny\")) app$get_log() # {shinytest2} R  info  11:15:20.11 Start AppDriver initialization # {shinytest2} R  info  11:15:20.11 Starting Shiny app # {shinytest2} R  info  11:15:20.99 Creating new chromote session # {shinytest2} R  info  11:15:21.14 Navigating to Shiny app # {shinytest2} R  info  11:15:21.27 Injecting shiny-tracer.js # {chromote}   JS info  11:15:21.28 shinytest2; jQuery not found # {chromote}   JS info  11:15:21.28 shinytest2; Loaded # {shinytest2} R  info  11:15:21.28 Waiting until Shiny app starts # {chromote}   JS info  11:15:21.35 shinytest2; jQuery found # {chromote}   JS info  11:15:21.35 shinytest2; Waiting for shiny session to connect # {chromote}   JS info  11:15:21.57 shinytest2; Connected # {chromote}   JS info  11:15:21.57 shinytest2; Ready # {chromote}   JS info  11:15:21.65 shinytest2; shiny:busy # {shinytest2} R  info  11:15:21.65 Shiny app started # {chromote}   JS info  11:15:21.88 shinytest2; shiny:idle # {chromote}   JS info  11:15:21.88 shinytest2; shiny:value distPlot # {shiny}      R  error ----------- Loading required package: shiny # {shiny}      R  error ----------- Running application in test mode. # {shiny}      R  error ----------- # {shiny}      R  error ----------- Listening on http://127.0.0.1:42558   # To capture all websocket traffic, set `options = list(shiny.trace = TRUE)` app <- AppDriver$new(   system.file(\"examples/01_hello\", package = \"shiny\"),   options = list(shiny.trace = TRUE) ) app$get_log() # (long output lines have been truncated) # {shinytest2} R  info      11:09:57.43 Start AppDriver initialization # {shinytest2} R  info      11:09:57.43 Starting Shiny app # {shinytest2} R  info      11:09:58.27 Creating new chromote session # {shinytest2} R  info      11:09:58.40 Navigating to Shiny app # {shinytest2} R  info      11:09:58.53 Injecting shiny-tracer.js # {chromote}   JS info      11:09:58.53 shinytest2; jQuery not found # {chromote}   JS info      11:09:58.53 shinytest2; Loaded # {shinytest2} R  info      11:09:58.54 Waiting until Shiny app starts # {chromote}   JS info      11:09:58.61 shinytest2; jQuery found # {chromote}   JS info      11:09:58.61 shinytest2; Waiting for shiny session to connect # {chromote}   JS websocket 11:09:58.73 send {\"method\":\"init\",\"data\":{\"bins\":30,|truncated # {chromote}   JS websocket 11:09:58.78 recv {\"config\":{\"workerId\":\"\",\"sessionId\":|truncated # {chromote}   JS info      11:09:58.78 shinytest2; Connected # {chromote}   JS info      11:09:58.78 shinytest2; Ready # {chromote}   JS websocket 11:09:58.85 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:58.85 recv {\"busy\":\"busy\"} # {chromote}   JS info      11:09:58.85 shinytest2; shiny:busy # {chromote}   JS websocket 11:09:58.86 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:58.86 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shinytest2} R  info      11:09:58.87 Shiny app started # {shinytest2} R  info      11:09:59.07 Setting inputs: 'bins' # {chromote}   JS websocket 11:09:59.08 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.08 recv {\"busy\":\"idle\"} # {chromote}   JS info      11:09:59.08 shinytest2; shiny:idle # {chromote}   JS websocket 11:09:59.08 recv {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {chromote}   JS info      11:09:59.08 shinytest2; shiny:value distPlot # {chromote}   JS info      11:09:59.08 shinytest2; inputQueue: adding bins # {chromote}   JS info      11:09:59.09 shinytest2; inputQueue: flushing bins # {chromote}   JS websocket 11:09:59.10 send {\"method\":\"update\",\"data\":{\"bins\":20}} # {chromote}   JS websocket 11:09:59.11 recv {\"progress\":{\"type\":\"binding\",|truncated # {chromote}   JS websocket 11:09:59.11 recv {\"busy\":\"busy\"} # {chromote}   JS info      11:09:59.11 shinytest2; shiny:busy # {chromote}   JS websocket 11:09:59.12 recv {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {chromote}   JS websocket 11:09:59.14 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.18 recv {\"recalculating\":{\"name\":\"distPlot\",|truncated # {chromote}   JS websocket 11:09:59.19 recv {\"busy\":\"idle\"} # {chromote}   JS info      11:09:59.19 shinytest2; shiny:idle # {chromote}   JS websocket 11:09:59.21 recv {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {chromote}   JS info      11:09:59.21 shinytest2; shiny:value distPlot # {shinytest2} R  info      11:09:59.21 Finished setting inputs. Timedout: FALSE # {shinytest2} R  info      11:09:59.21 Getting all values # {shiny}      R  error     ----------- Loading required package: shiny # {shiny}      R  error     ----------- Running application in test mode. # {shiny}      R  error     ----------- # {shiny}      R  error     ----------- Listening on http://127.0.0.1:1505 # {shiny}      R  error     ----------- SEND {\"config\":{\"workerId\":\"\",\"sessionId\":|truncated # {shiny}      R  error     ----------- RECV {\"method\":\"init\",\"data\":{\"bins\":30,|truncated # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\"|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"busy\"} # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\"|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"idle\"} # {shiny}      R  error     ----------- SEND {\"errors\":{},\"values\":{\"distPlot\":{|truncated # {shiny}      R  error     ----------- RECV {\"method\":\"update\",\"data\":{\"bins\":20}} # {shiny}      R  error     ----------- SEND {\"progress\":{\"type\":\"binding\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"busy\"} # {shiny}      R  error     ----------- SEND {\"custom\":{\"showcase-src\":{\"srcref\":|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"recalculating\":{\"name\":\"distPlot\",|truncated # {shiny}      R  error     ----------- SEND {\"busy\":\"idle\"} # {shiny}      R  error     ----------- SEND {\"errors\":{},\"values\":{\"distPlot\":{|truncated  }"},{"path":"https://rstudio.github.io/shinytest2/reference/migrate_from_shinytest.html","id":null,"dir":"Reference","previous_headings":"","what":"Migrate shinytest tests — migrate_from_shinytest","title":"Migrate shinytest tests — migrate_from_shinytest","text":"function migrate standard shinytest test files new shinytest2 + testthat ed 3 snapshot format.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/migrate_from_shinytest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Migrate shinytest tests — migrate_from_shinytest","text":"","code":"migrate_from_shinytest(   path,   ...,   clean = TRUE,   include_expect_screenshot = missing_arg(),   quiet = FALSE )"},{"path":"https://rstudio.github.io/shinytest2/reference/migrate_from_shinytest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Migrate shinytest tests — migrate_from_shinytest","text":"path Path test directory Shiny Rmd file ... Must empty. Allows parameter expansion. clean TRUE, shinytest test directory runner deleted migration use shinytest2. include_expect_screenshot TRUE, ShinyDriver$snapshot() turn AppDriver$expect_values() AppDriver$expect_screenshot(). FALSE, ShinyDriver$snapshot() turn AppDriver$expect_values(). missing, include_expect_screenshot behave FALSE shinytest::testApp(compareImages = FALSE) ShinyDriver$snapshotInit(screenshot = FALSE) called. quiet Logical determines migration information steps printed console.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/migrate_from_shinytest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Migrate shinytest tests — migrate_from_shinytest","text":"Invisible TRUE","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/migrate_from_shinytest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Migrate shinytest tests — migrate_from_shinytest","text":"shinytest file contents traversed converted new shinytest2 format. shinytest code can directly seen code, converted.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/platform_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Platform specific variant — platform_variant","title":"Platform specific variant — platform_variant","text":"Returns string used within testthat's' snapshot testing. Currently, Operating System R Version (major, minor, patch version) returned.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/platform_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Platform specific variant — platform_variant","text":"","code":"platform_variant(..., os_name = TRUE, r_version = TRUE)"},{"path":"https://rstudio.github.io/shinytest2/reference/platform_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Platform specific variant — platform_variant","text":"... Must empty. Allows parameter expansion. os_name TRUE, include OS name output r_version TRUE, include major minor version R version, patch version","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/platform_variant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Platform specific variant — platform_variant","text":"information needed future distinguish standard testing environments, function updated accordingly.","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/reference/record_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch test event recorder for a Shiny app — record_test","title":"Launch test event recorder for a Shiny app — record_test","text":"recording completed, create append new shinytest2 test testthat test_file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/record_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch test event recorder for a Shiny app — record_test","text":"","code":"record_test(   app = \".\",   ...,   name = NULL,   seed = NULL,   load_timeout = NULL,   shiny_args = list(),   test_file = \"test-shinytest2.R\",   open_test_file = rlang::is_interactive(),   allow_no_input_binding = NULL,   run_test = TRUE )"},{"path":"https://rstudio.github.io/shinytest2/reference/record_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch test event recorder for a Shiny app — record_test","text":"app AppDriver object, path Shiny application. ... Must empty. Allows parameter expansion. name Name provided AppDriver. value unique tests within test file. unique, different expect methods may overwrite . seed random seed set running app. seed also used test script. load_timeout Maximum time wait Shiny application load, milliseconds. value provided, saved test script. shiny_args list options pass runApp(). value provided, saved test script. test_file Base file name testthat test file. open_test_file TRUE, test file opened editor via file.edit() executing. allow_no_input_binding value controls events without input bindings recorded. TRUE, events without input bindings recorded. FALSE, events without input bindings recorded. NULL (default), updated input corresponding input, modal dialog shown asking unbound input events recorded. See AppDriver$set_inputs() information. run_test TRUE, test_file executed saving recording.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/register_input_processor.html","id":null,"dir":"Reference","previous_headings":"","what":"Register an input processor for the test recorder — register_input_processor","title":"Register an input processor for the test recorder — register_input_processor","text":"register_input_processor() registers input processor used test recorder. input processor function take one parameter, value, return string R code returns desired value. get_input_processors() returns named list registered input processor functions.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/register_input_processor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register an input processor for the test recorder — register_input_processor","text":"","code":"register_input_processor(input_type, processor)  get_input_processors()"},{"path":"https://rstudio.github.io/shinytest2/reference/register_input_processor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register an input processor for the test recorder — register_input_processor","text":"input_type name input type, example, \"mypkg.numberinput\". processor input processor function.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/test_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Test shiny application with testthat — test_app","title":"Test shiny application with testthat — test_app","text":"Example usage:","code":"# Interactive usage path_to_app <- \".\" shinytest2::test_app(path_to_app)"},{"path":"https://rstudio.github.io/shinytest2/reference/test_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test shiny application with testthat — test_app","text":"","code":"test_app(app_dir = \"../\", env = shiny::loadSupport(app_dir), ...)"},{"path":"https://rstudio.github.io/shinytest2/reference/test_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test shiny application with testthat — test_app","text":"app_dir base directory Shiny application env Use shiny application's environment sourcing R folder ... Parameters passed testthat::test_dir()","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/test_app.html","id":"file-tests-testthat-r","dir":"Reference","previous_headings":"","what":"File: ./tests/testthat.R","title":"Test shiny application with testthat — test_app","text":"shinytest2::test_app()","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/test_app.html","id":"file-tests-testthat-test-shinytest-r","dir":"Reference","previous_headings":"","what":"File: ./tests/testthat/test-shinytest2.R","title":"Test shiny application with testthat — test_app","text":"test_that(\"Testing external app\",  shinytest2::test_app(path_to_app) )","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/use_shinytest2.html","id":null,"dir":"Reference","previous_headings":"","what":"Use shinytest2 methods — use_shinytest2","title":"Use shinytest2 methods — use_shinytest2","text":"unified method initializes many different useful features using shinytest2. See actions details.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/use_shinytest2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use shinytest2 methods — use_shinytest2","text":"","code":"use_shinytest2(   app_dir = \".\",   ...,   open = rlang::is_interactive(),   quiet = FALSE,   overwrite = FALSE,   actions = c(\"runner\", \"test_file\", \"ignore\", \"package\") )"},{"path":"https://rstudio.github.io/shinytest2/reference/use_shinytest2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use shinytest2 methods — use_shinytest2","text":"app_dir base directory Shiny application ... Must empty. Allows parameter expansion. open TRUE, test file opened editor via file.edit() saving. quiet TRUE, console output suppressed. overwrite TRUE, test file test runner overwritten. actions Actions can performed: \"runner\": Create shinytest2 test runner ./tests/testthat.R \"test_file\": Create shinytest2 test file ./tests/testthat/test-shinytest2.R \"ignore\": Add entries .Rbuildignore .gitignore ignore new debug screenshots. (*_.new.png) \"package\": Add shinytest2 Suggests DESCRIPTION file.","code":""},{"path":"https://rstudio.github.io/shinytest2/reference/use_shinytest2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use shinytest2 methods — use_shinytest2","text":"","code":"if (FALSE) use_shinytest2()"},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes:","title":"Documentation:","text":"need need ? $expect_appshot(items = value, screenshot = FALSE) Text wont really change Classes added external packages images reliable","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"docs","dir":"","previous_headings":"","what":"Docs:","title":"Documentation:","text":"conditions need function? Tell docs sorted reason $execute_script_callback(): rare; JS requires callback; Otherwise use $execute_script() Migration guide shinytest -> shinytest2","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"Documentation:","text":"Drop $get_names(), $get_values() Rename $wait_for_condition(expr=) $wait_for_script(script=) Remove $wait_for_value() favor $wait_for_stable() execute_script_callback exist can write promise await promise add getter methods expectations add $get_variant()","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"todo-addd","dir":"","previous_headings":"","what":"TODO; addd","title":"Documentation:","text":"app$expect_screenshot(selector) # assert screenshot equals app$take_screenshot(selector) # screenshot helper file app$get_screenshot(selector, file) # save file app$expect_screenshot() # document just equal next line expect_snapshot_file(app$get_screenshot(), variant = app$get_variant(), compare = testthat::compare_file_binary) appexpectvalues()expectsnapshotvalue(appget_values(), variant = app$get_variant(), compare = testthat::compare_file_text) app <- AppDriver$new(appDir) app$click(id = \"foo\") app$set_inputs(foo = “click”) app$click(id = \"foo\") app$click(id = “foo2”) app$set_inputs(foo = “click”, Z = “click”) app$uploadFile(myFileInput = \"filePath\") app$click(“Z”) app$set_inputs(Z = “click”) app$set_inputs(myFileInput = “filePath”, Z = “click”) app$expect_snapshot() # shinytest appexpectappshot()apptake_screenshot(selector) # screenshot helper file app$expect_values() app$expect_values() # json values appexpectscreenshot(selector)apptake_screenshot(selector) # screenshot value","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"todo-addd-1","dir":"","previous_headings":"","what":"TODO; addd","title":"Documentation:","text":"app$expect_screenshot(selector) # assert screenshot equals app$take_screenshot(selector) # screenshot helper file app$get_screenshot(selector, file) # save file app$expect_appshot(id = \"winston\")  app$expect_values(auto = “winston”) app$expect_screenshot(selector = find_container(“winston”)) expects values $expect_values(screenshot = self$values_screenshot); AppDriver$new(values_screenshot = getOption(\"shinytest2.values_screenshot\", TRUE)) create “new” image diffviewer can view. throw error images different values-002-FLAG.png .gitignore -FLAG.png expectation expects screenshot ","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"week-1","dir":"","previous_headings":"","what":"Week 1","title":"Documentation:","text":"√ $expect_values(screenshot = self$values_screenshot) $expect_screenshot() . appshot √ “get” methods √ wait_for_stable(duration = 500) -> wait_for_idle(duration = 500) √ Add $get_variant() √ Remove wait_ shinytest2 API √ Transport chromote_eval() chromote","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"make-public-on-github","dir":"","previous_headings":"","what":"Make public on GitHub","title":"Documentation:","text":"Notify Eric David","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"week-2-pray","dir":"","previous_headings":"","what":"Week 2 (pray)","title":"Documentation:","text":"lose comments formatting harder long run Check wch/staticdocs, r-lib/styler (even r-lib/lintr) maybe extract comments reinsert AST conversion","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"vignettes-1","dir":"","previous_headings":"Week 3-4 (document)","what":"Vignettes:","title":"Documentation:","text":"need need ? Export internal values $expect_appshot(items = value, screenshot = FALSE) Text wont really change Classes added external packages images reliable Pull vignettes {shinytest} appropriate","code":""},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"docs-1","dir":"","previous_headings":"Week 3-4 (document)","what":"Docs:","title":"Documentation:","text":"conditions need function? Tell docs sorted reason $execute_script_callback(): rare; JS requires callback; Otherwise use $execute_script() Migration guide shinytest -> shinytest2","code":""},{"path":[]},{"path":"https://rstudio.github.io/shinytest2/todo.html","id":"notes-from-david","dir":"","previous_headings":"","what":"Notes from David:","title":"Documentation:","text":"Document: set chromote args starting testing * Link flags document","code":""},{"path":"https://rstudio.github.io/shinytest2/news/index.html","id":"shinytest2-0009000","dir":"Changelog","previous_headings":"","what":"shinytest2 0.0.0.9000","title":"shinytest2 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
